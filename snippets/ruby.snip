snippet     class-method
abbr        class << self ...
options     head
  class << self
    ${0}
  end

snippet     refine
abbr        refine Klass do ... end
options     head
  refine ${1:#:CLASS} do
    ${0}
  end

snippet     begin
abbr        begin ... end
options     head
	begin
		${1:#:code}
	rescue
		${2:#:code}
	end

snippet     exception
abbr        class Error < StandardError; end
options     head
  class ${1:NAME} < ${1:StandardError}; end

snippet     yard-param
abbr        @param [Type] ...
options     head
  # @param ${1:NAME} [${2:String}] ${3:#:DESC}

snippet     yard-return
abbr        @return [Type] ...
options     head
  # @return [${1:String}] ${3:#:DESC}

snippet     yard-raise
abbr        @raise [Type] ...
options     head
  # @raise [${1:StandardError}] ${3:#:DESC}

snippet     define_method
abbr        define_method() do...end
  define_method(${1:name}) do
    ${0}
  end

snippet     stackprof
options     head
  require 'stackprof'
  StackProf.run(mode: :cpu, out: '${1:stackprof-out}') do
    ${0}
  end

snippet     benchmark
options     head
  require 'benchmark'
  Benchmark.bmbm(20) do |x|
    x.report{10000.times{${0}}}
  end

snippet     tap
options     word
  tap { |${1:#:arg}| ${0} }

snippet     def_node_matcher
options     head
  def_node_matcher :${1:name}, <<~PATTERN
    ${0}
  PATTERN

snippet     def_node_search
options     head
  def_node_search :${1:name}, <<~PATTERN
    ${0}
  PATTERN

snippet     attr_reader
options     head
  attr_reader :${1:name}

snippet     attr_writer
options     head
  attr_writer :${1:name}

snippet     bundler-inline
options     head
  require 'bundler/inline'

  gemfile do
    source 'https://rubygems.org'
    gem '${1:name}'
  end


# ------------------------  override default snippets
snippet     def
abbr        def ... end
  def ${1:initialize}
    ${2:TARGET}
  end

snippet     require
options     head
  require '${0}'
