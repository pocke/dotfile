snippet     mainf
abbr        func main(){...}
options     head
  func main() {
    ${0:TARGET}
  }

snippet     init
abbr        func init(){...}
options     head
  func init() {
    ${0:TARGET}
  }

snippet     const
abbr        const ()
options     head
  const (
    ${0:TARGET}
  )

snippet     var
abbr        var () 
options     head
  var (
    ${0:TARGET}
  )

snippet     go
abbr        go func(){...}()
options     head
  go func() {
    ${0:TARGET}
  }()

snippet     method
abbr        func(...) ...() () {}
options     head
  func (${1:#:receiver} *${2:int}) ${3:fname}(${4}) ${5:int }{
    ${0:TARGET:return }
  }

snippet     handerf
options     head
  func ${1:#:NAME}(w http.ResponseWriter, r *http.Request) {
    ${0:TARGET}
  }

snippet     lambda
abbr        func () { ... }
options     word
  func (${1}) ${2:#:int }{
    ${0:TARGET:return }
  }

snippet     range2
abbr        for _ range
alias       for-range2
options     head
  for _, ${1:v} := range ${2:#:iterator} {
    ${0:TARGET}
  }

snippet     for2
abbr        for ;;
options     head
  for ${1:i} := 0; $1 < ${2}; $1++ {
    ${0:TARGET}
  }

snippet     tag
options     word
  \`${1:json}:"${2}"\`

snippet     lock
options     head
  ${1:mu}.Lock()
  defer $1.Unlock()
  ${0}

snippet     rlock
options     head
  ${1:mu}.RLock()
  defer $1.RUnlock()
  ${0}

snippet     constructor
options     head
  func New${1:#:NAME}(${2:#:Args}) *$1 {
    ${3:v} := &$1{
      ${0:#:attributes}
    }
    return $3
  }


# ------------------------  override default snippets

snippet     if
options     head
  if ${1:err != nil} {
      ${0:return err}
  }

snippet     range
abbr        for range
alias       for-range
options     head
  for ${1:v} := range ${2:#:iterator} {
    ${0:TARGET}
  }

snippet     for
alias       while
options     head
  for ${1} {
    ${0:TARGET}
  }
