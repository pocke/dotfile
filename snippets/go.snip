snippet     mainf
abbr        func main(){...}
options     head
  func main() {
    ${0:TARGET}
  }

snippet     init
abbr        func init(){...}
options     head
  func init() {
    ${0:TARGET}
  }

snippet     const
abbr        const ()
options     head
  const (
    ${0:TARGET}
  )

snippet     var
abbr        var () 
options     head
  var (
    ${0:TARGET}
  )

snippet     go
abbr        go func(){...}()
options     head
  go func() {
    ${0:TARGET}
  }()

snippet     method
abbr        func(...) ...() () {}
options     head
  func (${1:#:receiver} *${2:int}) ${3:fname}(${4}) ${5:int }{
    ${0:TARGET:return }
  }

snippet     handerf
options     head
  func ${1:#:NAME}(w http.ResponseWriter, r *http.Request) {
    ${0:TARGET}
  }

snippet     lambda
abbr        func () { ... }
options     word
  func (${1}) ${2:#:int }{
    ${0:TARGET:return }
  }

snippet     range2
abbr        for _ range
alias       for-range2
options     head
  for _, ${1:v} := range ${2:#:iterator} {
    ${0:TARGET}
  }

snippet     for2
abbr        for ;;
options     head
  for ${1:i} := 0; $1 < ${2}; $1++ {
    ${0:TARGET}
  }

snippet     tag
options     word
  \`${1:json}:"${2}"\`

snippet     lock
options     head
  ${1:mu}.Lock()
  defer $1.Unlock()
  ${0}

snippet     rlock
options     head
  ${1:mu}.RLock()
  defer $1.RUnlock()
  ${0}

snippet     constructor
options     head
  func New${1:#:NAME}(${2:#:Args}) *$1 {
    ${3:v} := &$1{
      ${0:#:attributes}
    }
    return $3
  }


# ------------------------  override default snippets

snippet     if
options     head
  if ${1:err != nil} {
      ${0:return err}
  }

snippet     range
abbr        for range
alias       for-range
options     head
  for ${1:v} := range ${2:#:iterator} {
    ${0:TARGET}
  }

snippet     for
alias       while
options     head
  for ${1} {
    ${0:TARGET}
  }


# ------------------ Build-in functions

snippet     close
abbr        func(c chan<- Type)
options     word
  close(${0})

snippet     len
abbr        func(v Type) int
options     word
  len(${0})

snippet     cap
abbr        func(v Type) int
options     word
  cap(${0})

snippet     new
abbr        func(Type) *Type
options     word
  new(${0})

snippet     make
abbr        func(Type, size IntegerType) Type
alias       make-slice
options     word
  make(${1:[]int}, ${0})

snippet     make-map
abbr        func(Type, size IntegerType) Type
alias       make-slice
options     word
  make(map[${1:string}]${2:string}, ${0})

snippet     make-chan
abbr        func(Type, size IntegerType) Type
alias       make-slice
options     word
  make(chan ${1:string}, ${0})

snippet     append
abbr        func(slice []Type, elems ...Type) []Type
options     word
  ${1:slice} = append($1, ${2:TARGET})

snippet     copy
abbr        func(dest, src []Type) int
options     word
  copy(${1:DEST}, ${2:SOURCE})

snippet     delete
abbr        func(m map[Type]Type1, key Type)
options     word
  delete(${1:TARGET}, ${2:Key})

snippet     complex
abbr        func(r, i FloatType) ComplexType
options     word
  complex(${1:REAL}, ${2:IMAG})

snippet     real
abbr        func(c ComplexType) FloatType
options     word
  real(${1:COMPLEX})

snippet     imag
abbr        func(c ComplexType) FloatType
options     word
  imag(${1:COMPLEX})

snippet     panic
abbr        func(v interface{})
options     word
  panic(${1:err})

snippet     recover
abbr        func() interface{}
options     word
  recover()
