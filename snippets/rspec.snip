snippet     describe
abbr        describe do ... end
	describe ${1:#:desc} do
		${2:TARGET}
	end

snippet     context
abbr        context do ... end
	context ${1:#:desc} do
		${2:TARGET}
	end

snippet     it
abbr        it do ... end
	it ${1:#:desc} do
		${2:TARGET}
	end

snippet     specify
abbr        specify do ... end
	specify ${1:#:desc} do
		${2:TARGET}
	end

snippet     before
abbr        before do ... end
	before do
		${1:TARGET}
	end

snippet     after
abbr        after do ... end
	after do
		${1:TARGET}
	end

snippet     expect
abbr        expect().to be
	expect(${1:subject}).to be_${2} ${0:TARGET}

snippet     expect-raise_error
abbr        expect{}.to raise_error
	expect{${1:subject}}.to raise_error ${0:StandardError}

snippet     is_asserted_by
options     head
  is_asserted_by{ ${0} }

snippet     allow-receive
abbr        allow().to receive()
  allow(${1:subject}).to receive(:${2:FUNC_NAME}).and_return(${0:TARGET})

snippet     allow_any_instance_of
abbr        allow_any_instance_of().to receive()
  allow_any_instance_of(${1:CLASS}).to receive(:${2:FUNC_NAME}).and_return(${0:TARGET})

snippet     it-is_expected
abbr        it {is_expected.to ...}
  it {is_expected.to be_${1} ${0:TARGET}}


snippet     let
  let(:${1:NAME}) { ${2:TARGET} }

snippet     subject
  subject { ${0} }

snippet     with_pry_testcase
options     word
  with_pry_testcase

snippet     shared_examples
options     head
  shared_examples ${1:NAME} do
    ${0:TARGET}
  end

snippet     shared_context
options     head
  shared_context ${1:NAME} do
    ${0:TARGET}
  end

snippet     include_examples
options     head
  include_examples ${0}

snippet     include_context
options     head
  include_context ${0}


# For RuboCop

snippet     expect_offense
options     head
  expect_offense(<<-RUBY)
    ${0}
  RUBY

snippet     expect_no_offenses
options     head
  expect_no_offenses(<<-RUBY)
    ${0}
  RUBY
